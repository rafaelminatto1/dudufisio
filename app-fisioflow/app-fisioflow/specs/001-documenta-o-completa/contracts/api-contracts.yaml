openapi: 3.0.3
info:
  title: FisioFlow API
  description: Comprehensive physiotherapy management system API
  version: 1.0.0
  contact:
    name: FisioFlow Development Team
    email: dev@fisioflow.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://fisioflow.vercel.app/api
    description: Production server
  - url: http://localhost:3000/api
    description: Development server

security:
  - BearerAuth: []

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Authenticate user with credentials
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: fisioterapeuta@clinica.com
                password:
                  type: string
                  minLength: 8
                  example: senha123
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'

  /auth/profile:
    get:
      tags:
        - Authentication
      summary: Get current user profile
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Patient Management Endpoints
  /patients:
    get:
      tags:
        - Patients
      summary: List patients with search and filtering
      parameters:
        - name: search
          in: query
          description: Search by name, CPF, or phone
          schema:
            type: string
            example: "Jo√£o Silva"
        - name: status
          in: query
          description: Filter by patient status
          schema:
            type: string
            enum: [active, inactive, archived]
            example: active
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of patients per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Patients retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Patient'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - Patients
      summary: Create new patient record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePatientRequest'
      responses:
        '201':
          description: Patient created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'

  /patients/{patientId}:
    get:
      tags:
        - Patients
      summary: Get patient by ID
      parameters:
        - $ref: '#/components/parameters/PatientId'
      responses:
        '200':
          description: Patient retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientDetailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Patients
      summary: Update patient information
      parameters:
        - $ref: '#/components/parameters/PatientId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePatientRequest'
      responses:
        '200':
          description: Patient updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'

    delete:
      tags:
        - Patients
      summary: Soft delete patient (set status to inactive)
      parameters:
        - $ref: '#/components/parameters/PatientId'
      responses:
        '200':
          description: Patient deactivated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Patient deactivated successfully"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Appointment Management Endpoints
  /appointments:
    get:
      tags:
        - Appointments
      summary: List appointments with calendar filtering
      parameters:
        - name: start_date
          in: query
          description: Filter appointments from this date
          schema:
            type: string
            format: date
            example: "2025-01-01"
        - name: end_date
          in: query
          description: Filter appointments until this date
          schema:
            type: string
            format: date
            example: "2025-01-31"
        - name: therapist_id
          in: query
          description: Filter by therapist
          schema:
            type: string
            format: uuid
        - name: patient_id
          in: query
          description: Filter by patient
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          description: Filter by appointment status
          schema:
            type: string
            enum: [scheduled, confirmed, in_progress, completed, cancelled, no_show]
      responses:
        '200':
          description: Appointments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Appointment'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - Appointments
      summary: Create new appointment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAppointmentRequest'
      responses:
        '201':
          description: Appointment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          description: Scheduling conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Therapist not available at requested time"
                  conflicting_appointments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Appointment'
        '422':
          $ref: '#/components/responses/ValidationError'

  /appointments/{appointmentId}:
    get:
      tags:
        - Appointments
      summary: Get appointment details
      parameters:
        - $ref: '#/components/parameters/AppointmentId'
      responses:
        '200':
          description: Appointment retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentDetailed'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Appointments
      summary: Update appointment
      parameters:
        - $ref: '#/components/parameters/AppointmentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAppointmentRequest'
      responses:
        '200':
          description: Appointment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Scheduling conflict
        '422':
          $ref: '#/components/responses/ValidationError'

  # Session Documentation Endpoints
  /sessions:
    get:
      tags:
        - Sessions
      summary: List treatment sessions
      parameters:
        - name: patient_id
          in: query
          description: Filter by patient
          schema:
            type: string
            format: uuid
        - name: therapist_id
          in: query
          description: Filter by therapist
          schema:
            type: string
            format: uuid
        - name: start_date
          in: query
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Sessions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Session'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - Sessions
      summary: Document new treatment session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSessionRequest'
      responses:
        '201':
          description: Session documented successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'

  # Body Mapping Endpoints
  /sessions/{sessionId}/pain-points:
    get:
      tags:
        - Body Mapping
      summary: Get pain points for a session
      parameters:
        - $ref: '#/components/parameters/SessionId'
      responses:
        '200':
          description: Pain points retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PainPoint'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    post:
      tags:
        - Body Mapping
      summary: Add pain point to session
      parameters:
        - $ref: '#/components/parameters/SessionId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePainPointRequest'
      responses:
        '201':
          description: Pain point added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PainPoint'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'

  /patients/{patientId}/pain-timeline:
    get:
      tags:
        - Body Mapping
      summary: Get pain evolution timeline for patient
      parameters:
        - $ref: '#/components/parameters/PatientId'
        - name: region
          in: query
          description: Filter by body region
          schema:
            type: string
        - name: start_date
          in: query
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Pain timeline retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/PainTimelinePoint'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  # Exercise Library Endpoints
  /exercises:
    get:
      tags:
        - Exercise Library
      summary: List exercises with search and filtering
      parameters:
        - name: category
          in: query
          description: Filter by exercise category
          schema:
            type: string
            enum:
              - mobilizacao_neural
              - cervical
              - membros_superiores
              - tronco_core
              - membros_inferiores
              - fortalecimento
              - alongamento
              - propriocepcao
              - cardiorrespiratorio
        - name: difficulty
          in: query
          description: Filter by difficulty level
          schema:
            type: integer
            minimum: 1
            maximum: 5
        - name: search
          in: query
          description: Search by title or description
          schema:
            type: string
        - name: equipment
          in: query
          description: Filter by required equipment
          schema:
            type: string
      responses:
        '200':
          description: Exercises retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Exercise'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags:
        - Exercise Library
      summary: Create new exercise
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateExerciseRequest'
      responses:
        '201':
          description: Exercise created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Exercise'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'

  # Exercise Prescription Endpoints
  /prescriptions:
    get:
      tags:
        - Prescriptions
      summary: List exercise prescriptions
      parameters:
        - name: patient_id
          in: query
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          schema:
            type: string
            enum: [active, paused, completed, cancelled]
      responses:
        '200':
          description: Prescriptions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Prescription'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - Prescriptions
      summary: Create exercise prescription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePrescriptionRequest'
      responses:
        '201':
          description: Prescription created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prescription'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '422':
          $ref: '#/components/responses/ValidationError'

  # Patient Feedback Endpoints
  /prescriptions/{prescriptionId}/feedback:
    post:
      tags:
        - Patient Feedback
      summary: Submit exercise completion feedback
      parameters:
        - name: prescriptionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFeedbackRequest'
      responses:
        '201':
          description: Feedback submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientFeedback'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/ValidationError'

  # Reporting Endpoints
  /reports/patient-progress/{patientId}:
    get:
      tags:
        - Reports
      summary: Generate patient progress report
      parameters:
        - $ref: '#/components/parameters/PatientId'
        - name: start_date
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          required: true
          schema:
            type: string
            format: date
        - name: format
          in: query
          schema:
            type: string
            enum: [json, pdf]
            default: json
      responses:
        '200':
          description: Report generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientProgressReport'
            application/pdf:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /reports/dashboard:
    get:
      tags:
        - Reports
      summary: Get dashboard analytics data
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [today, week, month, year]
            default: month
      responses:
        '200':
          description: Dashboard data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardData'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  # File Upload Endpoints
  /upload/patient-photo/{patientId}:
    post:
      tags:
        - File Upload
      summary: Upload patient photo
      parameters:
        - $ref: '#/components/parameters/PatientId'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                photo:
                  type: string
                  format: binary
                  description: Patient photo (max 5MB, JPG/PNG)
      responses:
        '200':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  photo_url:
                    type: string
                    format: uri
                    example: "https://storage.supabase.co/bucket/photos/patient-123.jpg"
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '413':
          description: File too large
        '415':
          description: Unsupported media type

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    PatientId:
      name: patientId
      in: path
      required: true
      description: Patient unique identifier
      schema:
        type: string
        format: uuid

    AppointmentId:
      name: appointmentId
      in: path
      required: true
      description: Appointment unique identifier
      schema:
        type: string
        format: uuid

    SessionId:
      name: sessionId
      in: path
      required: true
      description: Session unique identifier
      schema:
        type: string
        format: uuid

  responses:
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Authentication required"

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Insufficient permissions to access this resource"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Resource not found"

    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Validation failed"
              details:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: "email"
                    message:
                      type: string
                      example: "Invalid email format"

  schemas:
    # Authentication Schemas
    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
        user:
          $ref: '#/components/schemas/UserProfile'
        expires_in:
          type: integer
          example: 3600

    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "Dr. Jo√£o Silva"
        email:
          type: string
          format: email
          example: "joao@clinica.com"
        role:
          type: string
          enum: [admin, fisioterapeuta, estagiario, paciente]
        org_id:
          type: string
          format: uuid
        avatar_url:
          type: string
          format: uri

    # Patient Schemas
    Patient:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "Maria Silva"
        email:
          type: string
          format: email
        phone:
          type: string
          example: "+55 (11) 99999-9999"
        date_of_birth:
          type: string
          format: date
          example: "1985-06-15"
        status:
          type: string
          enum: [active, inactive, archived]
        photo_url:
          type: string
          format: uri
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PatientDetailed:
      allOf:
        - $ref: '#/components/schemas/Patient'
        - type: object
          properties:
            cpf:
              type: string
              example: "123.456.789-00"
            address:
              type: object
              properties:
                street:
                  type: string
                city:
                  type: string
                state:
                  type: string
                zip_code:
                  type: string
            emergency_contact:
              type: object
              properties:
                name:
                  type: string
                phone:
                  type: string
                relationship:
                  type: string
            profession:
              type: string
            marital_status:
              type: string
            consent_lgpd:
              type: boolean
            notes:
              type: string

    CreatePatientRequest:
      type: object
      required:
        - name
        - cpf
        - date_of_birth
        - phone
        - email
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
        cpf:
          type: string
          pattern: "^[0-9]{11}$"
        date_of_birth:
          type: string
          format: date
        phone:
          type: string
          pattern: "^\\+55\\s?\\([1-9][0-9]\\)\\s?[0-9]{4,5}-?[0-9]{4}$"
        email:
          type: string
          format: email
        address:
          type: object
        emergency_contact:
          type: object
        profession:
          type: string
        marital_status:
          type: string
        consent_lgpd:
          type: boolean
          default: false
        notes:
          type: string

    UpdatePatientRequest:
      allOf:
        - $ref: '#/components/schemas/CreatePatientRequest'
        - type: object
          properties:
            status:
              type: string
              enum: [active, inactive]

    # Appointment Schemas
    Appointment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        patient:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
        therapist:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
        starts_at:
          type: string
          format: date-time
        ends_at:
          type: string
          format: date-time
        status:
          type: string
          enum: [scheduled, confirmed, in_progress, completed, cancelled, no_show]
        type:
          type: string
          example: "avaliacao"
        notes:
          type: string
        created_at:
          type: string
          format: date-time

    AppointmentDetailed:
      allOf:
        - $ref: '#/components/schemas/Appointment'
        - type: object
          properties:
            patient:
              $ref: '#/components/schemas/Patient'
            therapist:
              $ref: '#/components/schemas/UserProfile'
            cancellation_reason:
              type: string

    CreateAppointmentRequest:
      type: object
      required:
        - patient_id
        - therapist_id
        - starts_at
        - ends_at
      properties:
        patient_id:
          type: string
          format: uuid
        therapist_id:
          type: string
          format: uuid
        starts_at:
          type: string
          format: date-time
        ends_at:
          type: string
          format: date-time
        type:
          type: string
        notes:
          type: string

    UpdateAppointmentRequest:
      allOf:
        - $ref: '#/components/schemas/CreateAppointmentRequest'
        - type: object
          properties:
            status:
              type: string
              enum: [scheduled, confirmed, cancelled, no_show]
            cancellation_reason:
              type: string

    # Session Schemas
    Session:
      type: object
      properties:
        id:
          type: string
          format: uuid
        appointment_id:
          type: string
          format: uuid
        patient:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
        therapist:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
        date:
          type: string
          format: date
        pain_level_before:
          type: integer
          minimum: 0
          maximum: 10
        pain_level_after:
          type: integer
          minimum: 0
          maximum: 10
        procedures_performed:
          type: string
        exercises_prescribed:
          type: string
        therapist_notes:
          type: string
        created_at:
          type: string
          format: date-time

    CreateSessionRequest:
      type: object
      required:
        - appointment_id
        - patient_id
        - therapist_id
      properties:
        appointment_id:
          type: string
          format: uuid
        patient_id:
          type: string
          format: uuid
        therapist_id:
          type: string
          format: uuid
        pain_level_before:
          type: integer
          minimum: 0
          maximum: 10
        pain_level_after:
          type: integer
          minimum: 0
          maximum: 10
        procedures_performed:
          type: string
        exercises_prescribed:
          type: string
        patient_response:
          type: string
        therapist_notes:
          type: string
        next_session_notes:
          type: string

    # Body Mapping Schemas
    PainPoint:
      type: object
      properties:
        id:
          type: string
          format: uuid
        session_id:
          type: string
          format: uuid
        body_side:
          type: string
          enum: [front, back]
        region_key:
          type: string
          example: "shoulder_left"
        x_coordinate:
          type: number
          minimum: 0
          maximum: 100
        y_coordinate:
          type: number
          minimum: 0
          maximum: 100
        pain_intensity:
          type: integer
          minimum: 0
          maximum: 10
        description:
          type: string
        photo_url:
          type: string
          format: uri
        created_at:
          type: string
          format: date-time

    CreatePainPointRequest:
      type: object
      required:
        - body_side
        - region_key
        - x_coordinate
        - y_coordinate
        - pain_intensity
      properties:
        body_side:
          type: string
          enum: [front, back]
        region_key:
          type: string
        x_coordinate:
          type: number
          minimum: 0
          maximum: 100
        y_coordinate:
          type: number
          minimum: 0
          maximum: 100
        pain_intensity:
          type: integer
          minimum: 0
          maximum: 10
        description:
          type: string

    PainTimelinePoint:
      type: object
      properties:
        date:
          type: string
          format: date
        session_id:
          type: string
          format: uuid
        region_key:
          type: string
        pain_intensity:
          type: integer
        description:
          type: string

    # Exercise Schemas
    Exercise:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          example: "Flex√£o Cervical"
        category:
          type: string
          enum:
            - mobilizacao_neural
            - cervical
            - membros_superiores
            - tronco_core
            - membros_inferiores
            - fortalecimento
            - alongamento
            - propriocepcao
            - cardiorrespiratorio
        body_regions:
          type: array
          items:
            type: string
        description:
          type: string
        instructions:
          type: string
        video_url:
          type: string
          format: uri
        thumbnail_url:
          type: string
          format: uri
        images:
          type: array
          items:
            type: string
            format: uri
        difficulty_level:
          type: integer
          minimum: 1
          maximum: 5
        equipment_required:
          type: array
          items:
            type: string
        contraindications:
          type: string
        indications:
          type: string
        duration_minutes:
          type: integer
        sets_default:
          type: integer
        reps_default:
          type: integer
        created_at:
          type: string
          format: date-time

    CreateExerciseRequest:
      type: object
      required:
        - title
        - category
        - difficulty_level
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 100
        category:
          type: string
          enum:
            - mobilizacao_neural
            - cervical
            - membros_superiores
            - tronco_core
            - membros_inferiores
            - fortalecimento
            - alongamento
            - propriocepcao
            - cardiorrespiratorio
        body_regions:
          type: array
          items:
            type: string
        description:
          type: string
        instructions:
          type: string
        video_url:
          type: string
          format: uri
        images:
          type: array
          items:
            type: string
            format: uri
        difficulty_level:
          type: integer
          minimum: 1
          maximum: 5
        equipment_required:
          type: array
          items:
            type: string
        contraindications:
          type: string
        indications:
          type: string
        duration_minutes:
          type: integer
        sets_default:
          type: integer
        reps_default:
          type: integer

    # Prescription Schemas
    Prescription:
      type: object
      properties:
        id:
          type: string
          format: uuid
        patient:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
        therapist:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
        title:
          type: string
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        frequency_per_week:
          type: integer
        status:
          type: string
          enum: [active, paused, completed, cancelled]
        exercises:
          type: array
          items:
            type: object
            properties:
              exercise:
                $ref: '#/components/schemas/Exercise'
              sets:
                type: integer
              reps:
                type: integer
              duration_minutes:
                type: integer
              frequency_per_week:
                type: integer
              special_instructions:
                type: string
        created_at:
          type: string
          format: date-time

    CreatePrescriptionRequest:
      type: object
      required:
        - patient_id
        - title
        - exercises
      properties:
        patient_id:
          type: string
          format: uuid
        title:
          type: string
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        frequency_per_week:
          type: integer
        notes:
          type: string
        exercises:
          type: array
          items:
            type: object
            required:
              - exercise_id
              - sets
            properties:
              exercise_id:
                type: string
                format: uuid
              sets:
                type: integer
                minimum: 1
              reps:
                type: integer
                minimum: 1
              duration_minutes:
                type: integer
                minimum: 1
              frequency_per_week:
                type: integer
                minimum: 1
                maximum: 7
              special_instructions:
                type: string

    # Patient Feedback Schemas
    PatientFeedback:
      type: object
      properties:
        id:
          type: string
          format: uuid
        prescription_item_id:
          type: string
          format: uuid
        feedback_date:
          type: string
          format: date
        completed:
          type: boolean
        difficulty_rating:
          type: integer
          minimum: 1
          maximum: 5
        pain_during_exercise:
          type: integer
          minimum: 0
          maximum: 10
        pain_after_exercise:
          type: integer
          minimum: 0
          maximum: 10
        notes:
          type: string
        created_at:
          type: string
          format: date-time

    CreateFeedbackRequest:
      type: object
      required:
        - prescription_item_id
      properties:
        prescription_item_id:
          type: string
          format: uuid
        completed:
          type: boolean
          default: false
        difficulty_rating:
          type: integer
          minimum: 1
          maximum: 5
        pain_during_exercise:
          type: integer
          minimum: 0
          maximum: 10
        pain_after_exercise:
          type: integer
          minimum: 0
          maximum: 10
        notes:
          type: string

    # Reporting Schemas
    PatientProgressReport:
      type: object
      properties:
        patient:
          $ref: '#/components/schemas/Patient'
        report_period:
          type: object
          properties:
            start_date:
              type: string
              format: date
            end_date:
              type: string
              format: date
        sessions_summary:
          type: object
          properties:
            total_sessions:
              type: integer
            pain_improvement:
              type: object
              properties:
                initial_avg:
                  type: number
                final_avg:
                  type: number
                improvement_percentage:
                  type: number
        exercise_adherence:
          type: object
          properties:
            prescribed_exercises:
              type: integer
            completed_exercises:
              type: integer
            adherence_rate:
              type: number
        pain_evolution:
          type: array
          items:
            $ref: '#/components/schemas/PainTimelinePoint'

    DashboardData:
      type: object
      properties:
        period:
          type: string
        patients:
          type: object
          properties:
            total:
              type: integer
            active:
              type: integer
            new_patients:
              type: integer
        appointments:
          type: object
          properties:
            total:
              type: integer
            completed:
              type: integer
            cancelled:
              type: integer
            no_shows:
              type: integer
        sessions:
          type: object
          properties:
            total:
              type: integer
            avg_pain_improvement:
              type: number
        revenue:
          type: object
          properties:
            total_cents:
              type: integer
            pending_payments:
              type: integer
        exercise_adherence:
          type: object
          properties:
            avg_completion_rate:
              type: number

    # Common Schemas
    Pagination:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total:
          type: integer
        total_pages:
          type: integer
        has_next:
          type: boolean
        has_prev:
          type: boolean

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Patients
    description: Patient management operations
  - name: Appointments
    description: Appointment scheduling and management
  - name: Sessions
    description: Treatment session documentation
  - name: Body Mapping
    description: Interactive pain mapping and tracking
  - name: Exercise Library
    description: Exercise management and library
  - name: Prescriptions
    description: Exercise prescription management
  - name: Patient Feedback
    description: Patient exercise feedback and outcomes
  - name: Reports
    description: Clinical reports and analytics
  - name: File Upload
    description: File upload operations